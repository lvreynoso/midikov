// generate-midi.js

import midiFile from 'midifile'
import midiEvents from 'midievents'
import fs from 'fs'

import Queue from './queue.js'

const START_TOKEN = 'START_TOKEN'
const STOP_TOKEN = 'STOP_TOKEN'

// markov data will be an object with "map" and "meta" properties.
// the values of these properties will be a markov map of notes
// and a histogram for metadata, respectively.
// the markov data is generated by generate-map.js

const generate = (markovData) => {
    let sampleObject = {
        "ticksPerBeat": {
            "96":2,
            "120":38,
            "192":8,
            "240":3,
            "384":6,
            "480":2,
            "960":2,
            "1024":2
        }
    }
    let beat = weightedChoice(sampleObject, 'ticksPerBeat');
    console.log(`Chosen beat is ${beat}bpm`);
}

// need a random weighted choice function
function weightedChoice(hashMap, property) {
    let histogram = hashMap[property];
    let choice = '';
    let weightSum = Object.values(histogram).reduce((sum, element) => {
        return sum + element;
    })
    // console.log(weightSum);
    let randomWeight = Math.floor(Math.random() * weightSum)
    // console.log(randomWeight);

    let keys = Object.keys(histogram)
    // console.log(keys);
    let chosen = false
    keys.forEach(key => {
        if ((randomWeight - histogram[key] <= 0) && (chosen == false)) {
            choice = key;
            chosen = true;
        } else if (chosen == false) {
            randomWeight -= histogram[key];
        }
    });

    return choice;
}

export default generate;
