{"version":3,"sources":["../../source/lib/assemble.js"],"names":["assemble","midiData","console","log","metaData","outputMidi","midiFile","header","setFormat","ticksPerBeat","undefined","setTicksPerBeat","setSMPTEDivision","SMPTEFrames","ticksPerFrame","addTrack","trackZeroEvents","timeSignature","tempoEvent","tempo","trackZeroProgram","delta","type","subtype","channel","param1","endOfTrackZero","length","push","setTrackEvents","trackNumbers","Object","keys","trackNotes","sort","a","b","parseInt","forEach","trackIndex","trackChannel","trackEvents","trackKeySignature","keySignature","trackProgram","noteOnTemplate","param2","noteOffTemplate","noteTracker","ticks","note","alpha","noteOn","assign","pitch","velocity","noteOff","offPosition","duration","previousTick","times","time","currentTime","event","endOftrack"],"mappings":"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","sourcesContent":["// assemble.js\n\n// try and make a MIDI file out of some notes.\n\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\n\n// 384 ticks per beat\n// time signature = [4, 2, 96, 8]\n// tempo 451127\n// key: 0, scale: 0 (C Major)\n\nconst assemble = (midiData) => {\n    // debugging\n    console.log(midiData.metaData);\n\n\n    let outputMidi = new midiFile();\n    // Using MIDI Format Type 1\n    outputMidi.header.setFormat(1);\n    // Set ticks per beat\n    if (midiData.metaData.ticksPerBeat != undefined) {\n        outputMidi.header.setTicksPerBeat(midiData.metaData.ticksPerBeat);\n    } else {\n        outputMidi.header.setSMPTEDivision(midiData.metaData.SMPTEFrames, midiData.metaData.ticksPerFrame);\n    }\n\n    // *********************\n    // Track 0: Meta stuff\n    // *********************\n    outputMidi.addTrack(0);\n    let trackZeroEvents = [];\n    // Time signature\n    let timeSignature = midiData.metaData.timeSignature;\n    // let timeSignature = {\n    //     delta: 0x00,\n    //     type: 0xff,\n    //     subtype: 0x58,\n    //     length: 0x04,\n    //     data: [0x04, 0x02, 0x60, 0x08],\n    //     param1: 0x04,\n    //     param2: 0x02,\n    //     param3: 0x60,\n    //     param4: 0x08\n    // }\n    // MIDI Tempo (bpm)\n    let tempoEvent = midiData.metaData.tempo;\n    // let tempoEvent = {\n    //     delta: 0x00,\n    //     type: 0xff,\n    //     subtype: 0x51,\n    //     length: 0x03,\n    //     tempo: 0x06e237,\n    // }\n    let trackZeroProgram = {\n        delta: 0x00,\n        type: 0x08,\n        subtype: 0x0c,\n        channel: 0x02,\n        param1: 0x00\n    }\n    // End the track\n    let endOfTrackZero = {\n        delta: 0x00,\n        type: 0xff,\n        subtype: 0x2f,\n        length: 0x00\n    }\n    if (timeSignature != undefined) {\n        trackZeroEvents.push(timeSignature);\n    }\n    if (tempoEvent != undefined) {\n        trackZeroEvents.push(tempoEvent);\n    }\n    trackZeroEvents.push(endOfTrackZero);\n    outputMidi.setTrackEvents(0, trackZeroEvents)\n\n    // *********************\n    // Tracks 1+: The Music\n    // *********************\n\n    // first figure out how many tracks are in the input object\n    // then loop through and write the tracks\n    let trackNumbers = Object.keys(midiData.trackNotes);\n    console.log(`Tracks to write: ${trackNumbers}`);\n    trackNumbers.sort((a, b) => {\n        return parseInt(a, 10) - parseInt(b, 10);\n    });\n\n    trackNumbers.forEach(trackIndex => {\n        console.log(`Writing track ${trackIndex}`);\n        outputMidi.addTrack(trackIndex);\n        let trackNotes = midiData.trackNotes[trackIndex];\n        // gets the wrong channel for some reason\n        let trackChannel = parseInt(trackIndex, 16);\n        console.log(`Instrument Channel: ${trackChannel}`);\n        // all track events\n        let trackEvents = [];\n        // Key signature\n        let trackKeySignature = midiData.metaData.keySignature;\n        // let trackKeySignature = {\n        //     delta: 0x00,\n        //     type: 0xff,\n        //     subtype: 0x59,\n        //     length: 0x02,\n        //     key: 0x00,\n        //     scale: 0x00\n        // }\n        // Program Change (Set the instrument)\n        let trackProgram = {\n            delta: 0x00,\n            type: 0x08,\n            subtype: 0x0c,\n            channel: trackChannel,\n            param1: 0x00\n        }\n        if (trackKeySignature != undefined) {\n            trackEvents.push(trackKeySignature);\n        }\n        trackEvents.push(trackProgram);\n\n        // convert each 'Note' to a pair of MIDI events: note on and note off.\n\n        let noteOnTemplate = {\n            delta: 0x00,\n            type: 0x08,\n            subtype: 0x09,\n            channel: trackChannel,\n            param1: 0x00,\n            param2: 0x00\n        }\n        let noteOffTemplate = {\n            delta: 0x00,\n            type: 0x08,\n            subtype: 0x08,\n            channel: trackChannel,\n            param1: 0x00,\n            param2: 0x00\n        }\n\n        // algorithm the second\n        // use a hashmap of ticks\n        // create all the events at the proper 'tick'\n        // THEN go through the hashmap and assemble events\n        // calculate deltas by the distance between ticks\n        // apparently Javascript has problems with hexadecimal math\n        // so ticks are in decimal numbers. seems to work...\n        let noteTracker = {};\n        let ticks = 0;\n        trackNotes.forEach(note => {\n            // if (note.alpha > 0x300) {\n            //     note.alpha = 0x300;\n            // }\n            // if (note.duration > 0x300) {\n            //     note.duration = 0x300;\n            // }\n            ticks += note.alpha;\n            // add the on event\n            let noteOn = Object.assign({}, noteOnTemplate);\n            noteOn.channel = trackChannel;\n            noteOn.param1 = note.pitch;\n            noteOn.param2 = note.velocity;\n            if (noteTracker[ticks] == undefined) {\n                noteTracker[ticks] = [noteOn];\n            } else {\n                noteTracker[ticks].push(noteOn);\n            }\n            // add the off event\n            let noteOff = Object.assign({}, noteOffTemplate);\n            noteOff.channel = trackChannel;\n            noteOff.param1 = note.pitch;\n            noteOff.param2 = note.velocity;\n            let offPosition = ticks + note.duration;\n            if (noteTracker[offPosition] == undefined) {\n                noteTracker[offPosition] = [noteOff];\n            } else {\n                noteTracker[offPosition].push(noteOff);\n            }\n        })\n        // now go through the hashmap in order and calculate deltas\n        let previousTick = 0;\n        let times = Object.keys(noteTracker);\n        times.sort((a, b) => {\n            return parseInt(a, 10) - parseInt(b, 10);\n        })\n        times.forEach(time => {\n            let currentTime = parseInt(time, 10);\n            noteTracker[time].forEach(event => {\n                event.delta = currentTime - previousTick;\n                // if (event.delta > 0x300) {\n                //     console.log(event);\n                // }\n                trackEvents.push(event);\n                previousTick = currentTime;\n            })\n        })\n\n        // console.log(noteTracker);\n\n        // finally, end the track\n        let endOftrack = Object.assign({}, endOfTrackZero);\n        trackEvents.push(endOftrack);\n        outputMidi.setTrackEvents(trackIndex, trackEvents);\n    });\n    // for (let k = 0; k < outputMidi.tracks.length; k++) {\n    //     let trackEventsLog = outputMidi.getTrackEvents(k);\n    //     console.log(`Track ${k}`);\n    //     console.log(trackEventsLog[0]);\n    //     console.log(trackEventsLog[1]);\n    //     console.log(trackEventsLog[2]);\n    //     console.log(trackEventsLog[3]);\n    //     console.log(trackEventsLog[4]);\n    //     console.log(trackEventsLog[5]);\n    // }\n\n\n    return outputMidi;\n}\n\nexport default assemble;\n"],"file":"assemble.js"}