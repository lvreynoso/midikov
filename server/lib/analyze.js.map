{"version":3,"sources":["../../source/lib/analyze.js"],"names":["analyze","midi","outputMidi","midiFile","header","setFormat","getFormat","console","log","getTimeDivision","Header","TICKS_PER_BEAT","setTicksPerBeat","getTicksPerBeat","setSMPTEDivision","getSMPTEFrames","getTicksPerFrame","index","tracks","length","addTrack","trackEvents","getTrackEvents","newTrackEvents","map","event","type","midiEvents","EVENT_MIDI","subtype","EVENT_MIDI_PROGRAM_CHANGE","channel","EVENT_MIDI_NOTE_OFF","EVENT_MIDI_NOTE_ON","EVENT_MIDI_CONTROLLER","EVENT_META","EVENT_META_END_OF_TRACK","EVENT_META_TRACK_NAME","EVENT_META_SET_TEMPO","EVENT_META_MARKER","EVENT_META_COPYRIGHT_NOTICE","EVENT_META_TIME_SIGNATURE","EVENT_META_KEY_SIGNATURE","EVENT_MIDI_PITCH_BEND","EVENT_MIDI_NOTE_AFTERTOUCH","EVENT_MIDI_CHANNEL_AFTERTOUCH","EVENT_SYSEX","EVENT_DIVSYSEX","setTrackEvents"],"mappings":"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","sourcesContent":["// analyze.js\n\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport hexToNote from './noteMap.js'\n\nconst analyze = (midi) => {\n    // copy the midi data\n    let outputMidi = new midiFile();\n    outputMidi.header.setFormat(midi.header.getFormat());\n    console.log(`MIDI File Format Type: ${midi.header.getFormat()}`);\n    // outputMidi.header.setTicksPerBeat(midi.header.getTicksPerBeat());\n    // outputMidi.header.setSMPTEDivision(midi.header.getSMPTEFrames(), midi.header.getTicksPerFrame());\n    if (midi.header.getTimeDivision() === midiFile.Header.TICKS_PER_BEAT) {\n        outputMidi.header.setTicksPerBeat(midi.header.getTicksPerBeat());\n        console.log(midi.header.getTicksPerBeat());\n    } else {\n        outputMidi.header.setSMPTEDivision(midi.header.getSMPTEFrames(), midi.header.getTicksPerFrame());\n        console.log(`${midi.header.getSMPTEFrames()}, ${midi.header.getTicksPerFrame()}`);\n    }\n\n    for (let index = 0; index < midi.tracks.length; index++) {\n        outputMidi.addTrack(index);\n        let trackEvents = midi.getTrackEvents(index);\n        let newTrackEvents = trackEvents.map(event => {\n            // change of instrument events are called \"midi program\" events.\n            // they are of event type 0x8 and subtype 0xc.\n            if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_PROGRAM_CHANGE) {\n                // event.param1 = 0;\n                // console.log('MIDI Program Change Event');\n                // console.log(event);\n                return event;\n            } else if (event.channel == 0x9) {\n                // percussion instruments live in event channel 0x9.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_MIDI && (event.subtype == midiEvents.EVENT_MIDI_NOTE_OFF || event.subtype == midiEvents.EVENT_MIDI_NOTE_ON)) {\n                // midi notes are played by a \"note on\" event and they end when a \"note off\" event is called.\n                // they are of event type 0x8 and subtypes 0x9 for 'note on' and 0x8 for 'note off'.\n                // if (event.subtype == midiEvents.EVENT_MIDI_NOTE_ON) {\n                //     let indexHex = parseInt(event.index, 16);\n                //     let indexString = indexHex.toString(10)\n                //     console.log(`Event at time ${indexString}`);\n                //     let note = hexToNote(event.param1);\n                //     console.log(`${note} played ${event.delta} clocks after the preceding event.`);\n                // } else if (event.subtype == midiEvents.EVENT_MIDI_NOTE_OFF) {\n                //     let indexHex = parseInt(event.index, 16);\n                //     let indexString = indexHex.toString(10)\n                //     console.log(`Event at time ${indexString}`);\n                //     let note = hexToNote(event.param1);\n                //     console.log(`${note} stopped ${event.delta} clocks after the preceding event.`);\n                // }\n                // console.log(event.delta);\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_CONTROLLER) {\n                // synthesizer effects are applied by midi controller events. they are of type 0x8\n                // and subtype 0xb, and affect all tracks.\n                // console.log(`Synthesizer effect on Track ${index}`);\n                // console.log(event);\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_END_OF_TRACK) {\n                // the end of a track is signalled by an event of type 0xff and subtype 0x2f.\n                // console.log(`End of track event:`);\n                // console.log(event);\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_TRACK_NAME) {\n                // track names are in events of type 0xff and subtype 0x3.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_SET_TEMPO) {\n                // this is a meta midi event that sets the tempo (bpm) of the entire song (all tracks).\n                // they are of type 0xff and subtype 0x51.\n                // the tempo parameter is the number of microseconds per quarter note.\n                // Divide 60,000,000 / this parameter and you get the bpm of the song.\n                // TRACK 0\n                console.log(`SET TEMPO event on Track ${index}`);\n                console.log(event);\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_MARKER) {\n                // this midi 'meta' marker event is simply a marker - it does the same function\n                // for a midi file as comments do for software code.\n                // type 0xff, subtype 0x06.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_COPYRIGHT_NOTICE) {\n                // a copyright notice. type 0xff, subtype 0x02.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_TIME_SIGNATURE) {\n                // used to change the time signature of a track. parameters are as follows:\n                // 1: numerator of the time signature\n                // 2: denominator of the time signature, as a negative power of 2. i.e. 2 represents a quarter note, 3 an eighth note, etc.\n                // 3: number of MIDI clocks between metronome clicks. (???)\n                // 4: number of notated 32nd notes in a MIDI quarter-note. usually 8.\n                // type: 0xff, subtype: 0x58\n                // TRACK 0\n                console.log(`Set time signature on Track ${index}`);\n                console.log(event);\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_KEY_SIGNATURE) {\n                // this event has two properties: key and scale. the key property specifies\n                // the number of flats (negative number) or number of sharps (positive). a key of\n                // 0 is the key of C.\n                // the scale property is 0 for a major key, and 1 for a minor key.\n                // type: 0xff, subtype: 0x59\n                // TRACK 0\n                console.log(`Set key signature on Track ${index}`);\n                console.log(event);\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_PITCH_BEND) {\n                // fancy pitch bending. type 0x08, subtype 0xe.\n                // console.log(`Pitch bend effect on Track ${index}`);\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_NOTE_AFTERTOUCH) {\n                // fancy note aftertouches. type 0x08, subtype 0xa.\n                // console.log(`Note aftertouch effect on Track ${index}`);\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_CHANNEL_AFTERTOUCH) {\n                // fancy channel aftertouches. type 0x08, subtype 0xd.\n                // console.log(`Channel effect on Track ${index}`);\n                return event;\n            } else if (event.type == midiEvents.EVENT_META) {\n                // all other meta events\n                // console.log(`Other meta event on Track ${index}`);\n                // console.log(event);\n                return 99;\n            } else if (event.type == midiEvents.EVENT_SYSEX || event.type == midiEvents.EVENT_DIVSYSEX) {\n                // drop all system exclusive messages\n                return 99;\n            } else {\n                console.log(event);\n                return event;\n            }\n        });\n        // let filteredTrackEvents = newTrackEvents.filter(element => {\n        //     if (element == 99) {\n        //         return false\n        //     } else {\n        //         return true\n        //     }\n        // })\n        console.log(`Track ${index} has ${newTrackEvents.length} events.`);\n        // if (index == 0 || index == 4 || index == 5) {\n        //     filteredTrackEvents.forEach(element => {\n        //         console.log(element);\n        //     })\n        // }\n        outputMidi.setTrackEvents(index, newTrackEvents);\n    }\n    return outputMidi;\n}\n\nexport default analyze;\n"],"file":"analyze.js"}