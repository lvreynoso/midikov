{"version":3,"sources":["../../source/lib/generate-midi.js"],"names":["generate","sourceArray","sampleMidi","makeMidiNoteMarkovMap","tokenList","order","markovMap","Queue","constructor","size","data","limit","length","enqueue","item","pop","unshift","dequeue","undefined","items","allItemsArray","i","push"],"mappings":";;;;;;;AAEA;;AACA;;;;AAHA;AAKA,MAAMA,QAAQ,GAAIC,WAAD,IAAiB;AAC9B,SAAOC,UAAU,EAAjB;AACH,CAFD;;AAIA,SAASA,UAAT,GAAsB,CAErB;;AAED,SAASC,qBAAT,CAA+BC,SAA/B,EAA0CC,KAA1C,EAAiD;AAC7C,MAAIC,SAAS,GAAG,EAAhB;AACH;;AAED,MAAMC,KAAN,CAAY;AACRC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKC,IAAL,GAAY,EAAZ;AACA,SAAKC,KAAL,GAAaF,IAAb;AACH;;AAEDG,EAAAA,MAAM,GAAG;AACL,WAAO,KAAKF,IAAL,CAAUE,MAAjB;AACH;;AAEDC,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,QAAI,KAAKF,MAAL,MAAiB,KAAKD,KAA1B,EAAiC;AAC7B,WAAKD,IAAL,CAAUK,GAAV;AACH;;AACD,SAAKL,IAAL,CAAUM,OAAV,CAAkBF,IAAlB;AACH;;AAEDG,EAAAA,OAAO,CAACH,IAAD,EAAO;AACV,QAAI,KAAKF,MAAL,MAAiB,CAArB,EAAwB;AACpB,aAAOM,SAAP;AACH,KAFD,MAEO;AACH,UAAIJ,IAAI,GAAG,KAAKJ,IAAL,CAAUK,GAAV,EAAX;AACA,aAAOD,IAAP;AACH;AACJ;;AAEDK,EAAAA,KAAK,GAAG;AACJ,QAAIC,aAAa,GAAG,EAApB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKX,IAAL,CAAUE,MAA9B,EAAsCS,CAAC,EAAvC,EAA2C;AACvCD,MAAAA,aAAa,CAACE,IAAd,CAAmB,KAAKZ,IAAL,CAAUW,CAAV,CAAnB;AACH;;AACD,WAAOD,aAAP;AACH;;AAhCO;;eAmCGpB,Q","sourcesContent":["// generate-midi.js\n\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\n\nconst generate = (sourceArray) => {\n    return sampleMidi();\n}\n\nfunction sampleMidi() {\n    \n}\n\nfunction makeMidiNoteMarkovMap(tokenList, order) {\n    let markovMap = {};\n}\n\nclass Queue {\n    constructor(size) {\n        this.data = [];\n        this.limit = size;\n    }\n\n    length() {\n        return this.data.length;\n    }\n\n    enqueue(item) {\n        if (this.length() == this.limit) {\n            this.data.pop();\n        }\n        this.data.unshift(item);\n    }\n\n    dequeue(item) {\n        if (this.length() == 0) {\n            return undefined;\n        } else {\n            let item = this.data.pop();\n            return item;\n        }\n    }\n\n    items() {\n        let allItemsArray = []\n        for (let i = 0; i < this.data.length; i++) {\n            allItemsArray.push(this.data[i]);\n        }\n        return allItemsArray;\n    }\n}\n\nexport default generate;\n"],"file":"generate-midi.js"}