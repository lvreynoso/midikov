{"version":3,"sources":["../../source/lib/transform-midi.js"],"names":["transformMIDI","midi","trackNotes","metaData","ticksPerBeat","undefined","SMPTEFrames","ticksPerFrame","keySignature","timeSignature","tempo","header","getTimeDivision","midiFile","Header","TICKS_PER_BEAT","getTicksPerBeat","getSMPTEFrames","getTicksPerFrame","index","tracks","length","notes","noteTracker","deltaTime","alpha","trackEvents","getTrackEvents","newTrackEvents","map","event","delta","type","midiEvents","EVENT_MIDI","subtype","EVENT_MIDI_PROGRAM_CHANGE","EVENT_MIDI_NOTE_ON","EVENT_MIDI_NOTE_OFF","noteFound","trackerKeys","Object","keys","i","param1","finishedNote","off","push","newNote","Note","EVENT_MIDI_CONTROLLER","EVENT_META","EVENT_META_END_OF_TRACK","EVENT_META_SET_TEMPO","EVENT_META_TIME_SIGNATURE","EVENT_META_KEY_SIGNATURE","forEach","track","midiData","constructor","time","pitch","velocity","param2","channel","startIndex","endIndex","duration"],"mappings":"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","sourcesContent":["// transform-midi.js\n\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\n\n// ALL EVENT NUMBERS ARE IN HEX\n// even though console.log() displays decimal numbers\n\n// don't forget to keep track of how many channels there are too\n\nconst transformMIDI = (midi) => {\n\n    let trackNotes = {};\n    let metaData = {\n        ticksPerBeat: undefined,\n        SMPTEFrames: undefined,\n        ticksPerFrame: undefined,\n        keySignature: undefined,\n        timeSignature: undefined,\n        tempo: undefined\n    }\n\n    if (midi.header.getTimeDivision() === midiFile.Header.TICKS_PER_BEAT) {\n        metaData.ticksPerBeat = midi.header.getTicksPerBeat();\n    } else {\n        metaData.SMPTEFrames = midi.header.getSMPTEFrames();\n        metaData.ticksPerFrame = midi.header.getTicksPerFrame();\n    }\n\n    for (let index = 0; index < midi.tracks.length; index++) {\n        let notes = [];\n        let noteTracker = {};\n        let deltaTime = 0x000000;\n        // keep track of delta between note on events\n        let alpha = 0x000000;\n        let trackEvents = midi.getTrackEvents(index);\n\n        let newTrackEvents = trackEvents.map(event => {\n            // first update the delta time.\n            deltaTime += event.delta;\n            alpha += event.delta;\n            // console.log(alpha);\n            // console.log(`Added ${event.delta} of delta time.`);\n            // change of instrument events are called \"midi program\" events.\n            // they are of event type 0x8 and subtype 0xc.\n            if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_PROGRAM_CHANGE) {\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && (event.subtype == midiEvents.EVENT_MIDI_NOTE_ON || event.subtype == midiEvents.EVENT_MIDI_NOTE_OFF)) {\n                // midi notes are played by a \"note on\" event and they end when a \"note off\" event is called.\n                // they are of event type 0x8 and subtypes 0x9 for 'note on' and 0x8 for 'note off'.\n\n                // first we check if there is a note for this pitch in the note tracker;\n                // if so, we end that note and start a new one\n                let noteFound = false;\n                let trackerKeys = Object.keys(noteTracker);\n                for (let i = 0; i < trackerKeys.length; i++) {\n                    if (trackerKeys[i] == event.param1) {\n                        noteFound = true;\n                    }\n                }\n                // if there is already a note for that pitch, end it\n                if (noteFound == true) {\n                    let finishedNote = noteTracker[event.param1];\n                    finishedNote.off(deltaTime);\n                    notes.push(finishedNote);\n                    delete noteTracker[event.param1];\n                }\n\n                // put a new note in the tracker\n                if (event.subtype == midiEvents.EVENT_MIDI_NOTE_ON) {\n                    let newNote = new Note(event, deltaTime, alpha);\n                    noteTracker[event.param1] = newNote;\n                    alpha = 0x000000;\n                }\n\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_CONTROLLER){\n                // synthesizer effects are applied by midi controller events. they are of type 0x8\n                // and subtype 0xb, and affect all tracks.\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_END_OF_TRACK) {\n                // the end of a track is signalled by an event of type 0xff and subtype 0x2f.\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_SET_TEMPO) {\n                // this is a meta midi event that sets the tempo (bpm) of the entire song (all tracks).\n                // they are of type 0xff and subtype 0x51.\n                // the tempo parameter is the number of microseconds per quarter note.\n                // Divide 60,000,000 / this parameter and you get the bpm of the song.\n                // TRACK 0\n                if (metaData.tempo == undefined) {\n                    metaData.tempo = event;\n                }\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_TIME_SIGNATURE) {\n                // used to change the time signature of a track. parameters are as follows:\n                // 1: numerator of the time signature\n                // 2: denominator of the time signature, as a negative power of 2. i.e. 2 represents a quarter note, 3 an eighth note, etc.\n                // 3: number of MIDI clocks between metronome clicks. (???)\n                // 4: number of notated 32nd notes in a MIDI quarter-note. usually 8.\n                // type: 0xff, subtype: 0x58\n                // TRACK 0\n                if (metaData.timeSignature == undefined) {\n                    metaData.timeSignature = event;\n                }\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_KEY_SIGNATURE) {\n                // this event has two properties: key and scale. the key property specifies\n                // the number of flats (negative number) or number of sharps (positive). a key of\n                // 0 is the key of C.\n                // the scale property is 0 for a major key, and 1 for a minor key.\n                // type: 0xff, subtype: 0x59\n                // TRACK 0\n                if (metaData.keySignature == undefined) {\n                    metaData.keySignature = event;\n                }\n                return event;\n            } else {\n                // console.log(event);\n                return event;\n            }\n        });\n        // console.log(`Track ${index} has ${newTrackEvents.length} events.`);\n        // let leftovers = Object.keys(noteTracker);\n        // console.log(`Note tracker has ${leftovers.length} leftovers.`)\n        // console.log(notes);\n        trackNotes[index] = notes;\n    }\n    // console.log(trackNotes);\n    // trim empty tracks\n    let tracks = Object.keys(trackNotes);\n    tracks.forEach(track => {\n        if (trackNotes[track].length == 0) {\n            delete trackNotes[track];\n            // console.log(`Deleted track ${track}`);\n        }\n    });\n    let midiData = {\n        trackNotes: trackNotes,\n        metaData: metaData\n    }\n    return midiData;\n}\n\nclass Note {\n    constructor(event, time, alpha) {\n        this.pitch = event.param1;\n        this.velocity = event.param2;\n        this.alpha = alpha;\n        this.channel = event.channel;\n        this.startIndex = time;\n        this.endIndex = 0x000000;\n        this.duration = 0x000000;\n    }\n\n    off(time) {\n        this.endIndex = time;\n        this.duration = this.endIndex - this.startIndex;\n    }\n}\n\nexport default transformMIDI;\n"],"file":"transform-midi.js"}