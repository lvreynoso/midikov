{"version":3,"sources":["../../source/lib/pianize.js"],"names":["pianize","midi","outputMidi","midiFile","header","setFormat","getFormat","console","log","getTimeDivision","Header","TICKS_PER_BEAT","setTicksPerBeat","getTicksPerBeat","setSMPTEDivision","getSMPTEFrames","getTicksPerFrame","index","tracks","length","addTrack","trackEvents","getTrackEvents","newTrackEvents","map","event","type","midiEvents","EVENT_MIDI","subtype","EVENT_MIDI_PROGRAM_CHANGE","param1","channel","EVENT_MIDI_NOTE_OFF","EVENT_MIDI_NOTE_ON","indexHex","parseInt","indexString","toString","note","delta","EVENT_MIDI_CONTROLLER","EVENT_META","EVENT_META_END_OF_TRACK","EVENT_META_TRACK_NAME","EVENT_META_SET_TEMPO","EVENT_META_MARKER","EVENT_META_COPYRIGHT_NOTICE","EVENT_META_TIME_SIGNATURE","EVENT_META_KEY_SIGNATURE","EVENT_MIDI_PITCH_BEND","EVENT_MIDI_NOTE_AFTERTOUCH","EVENT_MIDI_CHANNEL_AFTERTOUCH","EVENT_SYSEX","EVENT_DIVSYSEX","filteredTrackEvents","filter","element","setTrackEvents"],"mappings":"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","sourcesContent":["// pianize.js\n\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport hexToNote from './noteMap.js'\n\nconst pianize = (midi) => {\n    // copy the midi data\n    let outputMidi = new midiFile();\n    outputMidi.header.setFormat(midi.header.getFormat());\n    console.log(`MIDI File Format Type: ${midi.header.getFormat()}`);\n    if (midi.header.getTimeDivision() === midiFile.Header.TICKS_PER_BEAT) {\n        outputMidi.header.setTicksPerBeat(midi.header.getTicksPerBeat());\n    } else {\n        outputMidi.header.setSMPTEDivision(midi.header.getSMPTEFrames(), midi.header.getTicksPerFrame());\n    }\n\n    for (let index = 0; index < midi.tracks.length; index++) {\n        outputMidi.addTrack(index);\n        let trackEvents = midi.getTrackEvents(index);\n        let newTrackEvents = trackEvents.map(event => {\n            // change of instrument events are called \"midi program\" events.\n            // they are of event type 0x8 and subtype 0xc.\n            if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_PROGRAM_CHANGE) {\n                event.param1 = 0;\n                return event;\n            } else if (event.channel == 0x9) {\n                // percussion instruments live in event channel 0x9.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_MIDI && (event.subtype == midiEvents.EVENT_MIDI_NOTE_OFF || event.subtype == midiEvents.EVENT_MIDI_NOTE_ON)) {\n                // midi notes are played by a \"note on\" event and they end when a \"note off\" event is called.\n                // they are of event type 0x8 and subtypes 0x9 for 'note on' and 0x8 for 'note off'.\n                if (event.subtype == midiEvents.EVENT_MIDI_NOTE_ON) {\n                    let indexHex = parseInt(event.index, 16);\n                    let indexString = indexHex.toString(10)\n                    console.log(`Event at time ${indexString}`);\n                    let note = hexToNote(event.param1);\n                    console.log(`${note} played ${event.delta} clocks after the preceding event.`);\n                }\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_CONTROLLER) {\n                // synthesizer effects are applied by midi controller events. they are of type 0x8\n                // and subtype 0xb, and affect all tracks.\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_END_OF_TRACK) {\n                // the end of a track is signalled by an event of type 0xff and subtype 0x2f.\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_TRACK_NAME) {\n                // track names are in events of type 0xff and subtype 0x3.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_SET_TEMPO) {\n                // this is a meta midi event that sets the tempo (bpm) of the entire song (all tracks).\n                // they are of type 0xff and subtype 0x51.\n                // the tempo parameter is the number of microseconds per quarter note.\n                // Divide 60,000,000 / this parameter and you get the bpm of the song.\n                // TRACK 0\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_MARKER) {\n                // this midi 'meta' marker event is simply a marker - it does the same function\n                // for a midi file as comments do for software code.\n                // type 0xff, subtype 0x06.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_COPYRIGHT_NOTICE) {\n                // a copyright notice. type 0xff, subtype 0x02.\n                return 99;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_TIME_SIGNATURE) {\n                // used to change the time signature of a track. parameters are as follows:\n                // 1: numerator of the time signature\n                // 2: denominator of the time signature, as a negative power of 2. i.e. 2 represents a quarter note, 3 an eighth note, etc.\n                // 3: number of MIDI clocks between metronome clicks. (???)\n                // 4: number of notated 32nd notes in a MIDI quarter-note. usually 8.\n                // type: 0xff, subtype: 0x58\n                // TRACK 0\n                return event;\n            } else if (event.type == midiEvents.EVENT_META && event.subtype == midiEvents.EVENT_META_KEY_SIGNATURE) {\n                // this event has two properties: key and scale. the key property specifies\n                // the number of flats (negative number) or number of sharps (positive). a key of\n                // 0 is the key of C.\n                // the scale property is 0 for a major key, and 1 for a minor key.\n                // type: 0xff, subtype: 0x59\n                // TRACK 0\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_PITCH_BEND) {\n                // fancy pitch bending. type 0x08, subtype 0xe.\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_NOTE_AFTERTOUCH) {\n                // fancy note aftertouches. type 0x08, subtype 0xa.\n                return event;\n            } else if (event.type == midiEvents.EVENT_MIDI && event.subtype == midiEvents.EVENT_MIDI_CHANNEL_AFTERTOUCH) {\n                // fancy channel aftertouches. type 0x08, subtype 0xd.\n                return event;\n            } else if (event.type == midiEvents.EVENT_META) {\n                // drop all other meta events\n                return 99;\n            } else if (event.type == midiEvents.EVENT_SYSEX || event.type == midiEvents.EVENT_DIVSYSEX) {\n                // drop all system exclusive messages\n                return 99;\n            } else {\n                console.log(event);\n                return event;\n            }\n        });\n        let filteredTrackEvents = newTrackEvents.filter(element => {\n            if (element == 99) {\n                return false\n            } else {\n                return true\n            }\n        })\n        // console.log(`Track ${index} has ${filteredTrackEvents.length} events.`);\n        outputMidi.setTrackEvents(index, filteredTrackEvents);\n    }\n    return outputMidi;\n}\n\nexport default pianize;\n"],"file":"pianize.js"}