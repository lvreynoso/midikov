{"version":3,"sources":["../../source/controllers/test.js"],"names":["test","express","Router","get","req","res","render","testCategory","query","category","testMidiDBObjects","MIDIFile","find","catch","err","console","log","testMidi","data","testNotes","assembledMidi","filename","binaryMidiData","Buffer","from","getContent","originalMidiData","redirect","forEach","notes","length","analyzedMIDI","name","counter","midi","title"],"mappings":"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","sourcesContent":["// test.js\n\n// app\nimport express from 'express'\nconst test = express.Router()\n\n// disk i/o\nimport fs from 'fs'\n\n// models\nimport MIDIFile from '../models/MIDIFile.js'\n\n// midi manipulation\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport readMIDI from '../lib/read-midi.js'\nimport writeMIDI from '../lib/write-midi.js'\nimport transformMIDI from '../lib/transform-midi.js'\nimport generateMIDI from '../lib/generate-midi.js'\nimport analyzeMIDI from '../lib/analyze.js'\nimport assembleMIDI from '../lib/assemble.js'\n\n// landing page\ntest.get('/', (req, res) => {\n    res.render('test');\n})\n\ntest.get('/assemble', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let testNotes = transformMIDI(testMidi);\n\n    let assembledMidi = assembleMIDI(testNotes);\n\n    // the 'assembled' midi\n    let filename = `assemble_test`;\n    let binaryMidiData = Buffer.from(assembledMidi.getContent());\n    writeMIDI(binaryMidiData, filename);\n\n    // the original midi\n    let originalMidiData = Buffer.from(testMidi.getContent());\n    writeMIDI(originalMidiData, 'original_test')\n\n    res.redirect('/test');\n})\n\ntest.get('/transform', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let testNotes = transformMIDI(testMidi);\n    testNotes.forEach(notes => {\n        console.log(notes.length);\n    })\n    // console.log(testNotes);\n\n    res.redirect('/test');\n})\n\ntest.get('/analyze', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let analyzedMIDI = analyzeMIDI(testMidi);\n\n    res.redirect('/test');\n})\n\n// testing:\n// --> read midi from database\n// --> write midi to file\ntest.get('/write', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let name = '_pianized_';\n    let counter = 1;\n    testMidiDBObjects.forEach(midi => {\n        let filename = `${counter}${name}${midi.title}`;\n        writeMIDI(midi.data, filename);\n        counter += 1;\n    })\n    // let testMidi = readMIDI(testMidiDBObjects[0].data);\n    // let transformedMIDI = transformMIDI(testMidi);\n    // writeMIDI(testMIDI);\n\n    res.redirect('/test');\n})\n\nexport default test;\n"],"file":"test.js"}