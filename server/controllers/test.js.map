{"version":3,"sources":["../../source/controllers/test.js"],"names":["test","express","Router","get","req","res","render","testCategory","query","category","testMidiDBObjects","MIDIFile","find","catch","err","console","log","midiObjects","map","dbEntry","convertedMidi","data","deconstructedMidi","markovData","generatedSong","generatedMidi","filename","binaryMidiData","Buffer","from","getContent","redirect","testMidi","testNotes","assembledMidi","originalMidiData","forEach","notes","length","analyzedMIDI","name","counter","midi","title"],"mappings":"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","sourcesContent":["// test.js\n\n// app\nimport express from 'express'\nconst test = express.Router()\n\n// disk i/o\nimport fs from 'fs'\n\n// models\nimport MIDIFile from '../models/MIDIFile.js'\n\n// midi manipulation\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport readMIDI from '../lib/read-midi.js'\nimport writeMIDI from '../lib/write-midi.js'\nimport transformMIDI from '../lib/transform-midi.js'\nimport generateMIDI from '../lib/generate-midi.js'\nimport analyzeMIDI from '../lib/analyze.js'\nimport assembleMIDI from '../lib/assemble.js'\nimport testpad from '../lib/testpad.js'\nimport generateMap from '../lib/generate-map.js'\n\n// landing page\ntest.get('/', (req, res) => {\n    res.render('test');\n})\n\ntest.get('/generate', async (req, res) => {\n    // pull test midis from the data base\n    const testCategory = 'Pokemon';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    const midiObjects = testMidiDBObjects.map(dbEntry => {\n        const convertedMidi = readMIDI(dbEntry.data);\n        const deconstructedMidi = transformMIDI(convertedMidi);\n        return deconstructedMidi;\n    });\n    // test with order 1\n    let markovData = generateMap(midiObjects, 1, testCategory);\n    let generatedSong = generateMIDI(markovData, 1, testCategory);\n    let generatedMidi = assembleMIDI(generatedSong);\n\n    // the 'assembled' midi\n    let filename = `generate_test`;\n    let binaryMidiData = Buffer.from(generatedMidi.getContent());\n    writeMIDI(binaryMidiData, filename);\n\n    res.redirect('/test');\n})\n\ntest.get('/map', async (req, res) => {\n    // pull test midis from the data base\n    const testCategory = 'Pokemon';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    const midiObjects = testMidiDBObjects.map(dbEntry => {\n        const convertedMidi = readMIDI(dbEntry.data);\n        const deconstructedMidi = transformMIDI(convertedMidi);\n        return deconstructedMidi;\n    });\n    // test with order 1\n    generateMap(midiObjects, 1, testCategory);\n\n    res.redirect('/test');\n})\n\ntest.get('/scratch', (req, res) => {\n    testpad();\n\n    res.redirect('/test');\n})\n\ntest.get('/assemble', async (req, res) => {\n    // pull test midis from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let testNotes = transformMIDI(testMidi);\n\n    let assembledMidi = assembleMIDI(testNotes);\n\n    // the 'assembled' midi\n    let filename = `assemble_test`;\n    let binaryMidiData = Buffer.from(assembledMidi.getContent());\n    writeMIDI(binaryMidiData, filename);\n\n    // the original midi\n    let originalMidiData = Buffer.from(testMidi.getContent());\n    writeMIDI(originalMidiData, 'original_test')\n\n    res.redirect('/test');\n})\n\ntest.get('/transform', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let testNotes = transformMIDI(testMidi);\n    testNotes.forEach(notes => {\n        console.log(notes.length);\n    })\n    // console.log(testNotes);\n\n    res.redirect('/test');\n})\n\ntest.get('/analyze', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let testMidi = readMIDI(testMidiDBObjects[0].data);\n    let analyzedMIDI = analyzeMIDI(testMidi);\n\n    res.redirect('/test');\n})\n\n// testing:\n// --> read midi from database\n// --> write midi to file\ntest.get('/write', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let name = '_pianized_';\n    let counter = 1;\n    testMidiDBObjects.forEach(midi => {\n        let filename = `${counter}${name}${midi.title}`;\n        writeMIDI(midi.data, filename);\n        counter += 1;\n    })\n    // let testMidi = readMIDI(testMidiDBObjects[0].data);\n    // let transformedMIDI = transformMIDI(testMidi);\n    // writeMIDI(testMIDI);\n\n    res.redirect('/test');\n})\n\nexport default test;\n"],"file":"test.js"}