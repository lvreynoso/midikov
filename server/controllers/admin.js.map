{"version":3,"sources":["../../source/controllers/admin.js"],"names":["admin","express","Router","storage","multer","memoryStorage","upload","get","req","res","currentUser","user","render","post","array","category","body","files","forEach","file","newMidi","MIDIFile","console","log","originalname","re","regexedTitle","replace","title","library","midiJS","buffer","pianoVersion","data","Buffer","from","getContent","savedMidi","save","catch","err","redirect"],"mappings":";;;;;;;;;;;AAEA;;AACA;;AAMA;;AAEA;;AACA;;AACA;;;;AAbA;AAIA,MAAMA,KAAK,GAAGC,iBAAQC,MAAR,EAAd;;AACA,MAAMC,OAAO,GAAGC,gBAAOC,aAAP,EAAhB;;AACA,MAAMC,MAAM,GAAG,qBAAO;AAAEH,EAAAA,OAAO,EAAEA;AAAX,CAAP,CAAf,C,CAEA;;AAOAH,KAAK,CAACO,GAAN,CAAU,GAAV,EAAe,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzB,QAAMC,WAAW,GAAGF,GAAG,CAACG,IAAxB;AACAF,EAAAA,GAAG,CAACG,MAAJ,CAAW,OAAX,EAAoB;AAAEF,IAAAA;AAAF,GAApB;AACH,CAHD;AAKAV,KAAK,CAACa,IAAN,CAAW,SAAX,EAAsBP,MAAM,CAACQ,KAAP,CAAa,OAAb,EAAsB,EAAtB,CAAtB,EAAiD,OAAON,GAAP,EAAYC,GAAZ,KAAoB;AACjE,QAAMM,QAAQ,GAAGP,GAAG,CAACQ,IAAJ,CAASD,QAA1B;AACAP,EAAAA,GAAG,CAACS,KAAJ,CAAUC,OAAV,CAAmB,MAAMC,IAAN,IAAc;AAC7B,QAAIC,OAAO,GAAG,IAAIC,iBAAJ,EAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,cAAaJ,IAAI,CAACK,YAAa,EAA5C,EAF6B,CAG7B;;AACA,QAAIC,EAAE,GAAG,eAAT;AACA,QAAIC,YAAY,GAAGP,IAAI,CAACK,YAAL,CAAkBG,OAAlB,CAA0BF,EAA1B,EAA8B,EAA9B,CAAnB;AACAL,IAAAA,OAAO,CAACQ,KAAR,GAAgBF,YAAhB;AACAN,IAAAA,OAAO,CAACS,OAAR,GAAkB,IAAlB;AACAT,IAAAA,OAAO,CAACL,QAAR,GAAmBA,QAAnB,CAR6B,CAU7B;;AACA,QAAIe,MAAM,GAAG,uBAASX,IAAI,CAACY,MAAd,CAAb;AACA,QAAIC,YAAY,GAAG,sBAAQF,MAAR,CAAnB;AACAV,IAAAA,OAAO,CAACa,IAAR,GAAeC,MAAM,CAACC,IAAP,CAAYH,YAAY,CAACI,UAAb,EAAZ,CAAf;AAEA,UAAMC,SAAS,GAAG,MAAMjB,OAAO,CAACkB,IAAR,GAAeC,KAAf,CAAqBC,GAAG,IAAI;AAAElB,MAAAA,OAAO,CAACC,GAAR,CAAYiB,GAAZ;AAAmB,KAAjD,CAAxB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAYc,SAAZ;AACH,GAjBD;AAkBA5B,EAAAA,GAAG,CAACgC,QAAJ,CAAa,QAAb;AACH,CArBD;eAuBezC,K","sourcesContent":["// admin.js\n\nimport express from 'express'\nimport multer from 'multer'\nconst admin = express.Router()\nconst storage = multer.memoryStorage()\nconst upload = multer({ storage: storage })\n\n// model\nimport MIDIFile from '../models/MIDIFile.js'\n\nimport readMIDI from '../lib/read-midi.js'\nimport pianize from '../lib/pianize.js'\nimport midiFile from 'midifile'\n\nadmin.get('/', (req, res) => {\n    const currentUser = req.user;\n    res.render('admin', { currentUser })\n})\n\nadmin.post('/upload', upload.array('midis', 64), async (req, res) => {\n    const category = req.body.category;\n    req.files.forEach( async file => {\n        let newMidi = new MIDIFile();\n        console.log(`Processing ${file.originalname}`);\n        // let re = /^(.+)(\\.[^ .]+)?$/g;\n        let re = /(\\.[^ .]+)?$/g;\n        let regexedTitle = file.originalname.replace(re, '');\n        newMidi.title = regexedTitle;\n        newMidi.library = true;\n        newMidi.category = category;\n\n        // pianize the MIDI file\n        let midiJS = readMIDI(file.buffer);\n        let pianoVersion = pianize(midiJS);\n        newMidi.data = Buffer.from(pianoVersion.getContent());\n\n        const savedMidi = await newMidi.save().catch(err => { console.log(err); })\n        console.log(savedMidi);\n    });\n    res.redirect('/admin')\n})\n\nexport default admin;\n"],"file":"admin.js"}