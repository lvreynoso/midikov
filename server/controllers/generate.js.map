{"version":3,"sources":["../../source/controllers/generate.js"],"names":["generate","express","Router","post","req","res","category","body","order","parseInt","split","console","log","query","categoryMidiDBObjects","MIDIFile","find","catch","err","midiObjects","map","dbEntry","convertedMidi","data","deconstructedMidi","failed","generatedHex","markovData","generatedSong","generatedMidi","generatedBinary","Buffer","from","getContent","toString","error","status","generatedObject","title","hex","path","generatedJSON","JSON","stringify","send"],"mappings":";;;;;;;;;;;AAGA;;AAIA;;AAGA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AApBA;AAEA;AAEA,MAAMA,QAAQ,GAAGC,iBAAQC,MAAR,EAAjB,C,CAEA;;;AAgBAF,QAAQ,CAACG,IAAT,CAAc,GAAd,EAAmB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACnC;AACA,QAAMC,QAAQ,GAAGF,GAAG,CAACG,IAAJ,CAASD,QAA1B;AACA,QAAME,KAAK,GAAGC,QAAQ,CAACL,GAAG,CAACG,IAAJ,CAASC,KAAT,CAAeE,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CAAD,EAA+B,EAA/B,CAAtB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,QAAMK,KAAK,GAAG;AACVP,IAAAA,QAAQ,EAAEA;AADA,GAAd;AAIA,QAAMQ,qBAAqB,GAAG,MAAMC,kBAASC,IAAT,CAAcH,KAAd,EAAqBI,KAArB,CAA2BC,GAAG,IAAI;AAAEP,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AAAkB,GAAtD,CAApC;AACA,QAAMC,WAAW,GAAGL,qBAAqB,CAACM,GAAtB,CAA0BC,OAAO,IAAI;AACrD,UAAMC,aAAa,GAAG,uBAASD,OAAO,CAACE,IAAjB,CAAtB;AACA,UAAMC,iBAAiB,GAAG,4BAAcF,aAAd,CAA1B;AACA,WAAOE,iBAAP;AACH,GAJmB,CAApB;AAKA,MAAIC,MAAM,GAAG,KAAb;AACA,MAAIC,YAAY,GAAG,EAAnB;;AACA,MAAI;AACA;AACA,UAAMC,UAAU,GAAG,0BAAYR,WAAZ,EAAyBX,KAAzB,EAAgCF,QAAhC,CAAnB;AACA,UAAMsB,aAAa,GAAG,2BAAaD,UAAb,EAAyBnB,KAAzB,EAAgCF,QAAhC,CAAtB;AACA,UAAMuB,aAAa,GAAG,uBAAaD,aAAb,CAAtB;AAEA,UAAME,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYH,aAAa,CAACI,UAAd,EAAZ,CAAxB;AACAP,IAAAA,YAAY,GAAGI,eAAe,CAACI,QAAhB,CAAyB,KAAzB,CAAf,CAPA,CASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEH,GAlBD,CAkBE,OAAOC,KAAP,EAAc;AACZxB,IAAAA,OAAO,CAACC,GAAR,CAAYuB,KAAZ;AACAV,IAAAA,MAAM,GAAG,IAAT;AACH,GArBD,SAqBU;AACN,QAAIA,MAAJ,EAAY;AACRpB,MAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX;AACH,KAFD,MAEO;AACH;AACA,YAAMC,eAAe,GAAG;AACpBC,QAAAA,KAAK,EAAG,GAAEhC,QAAS,sBAAqBE,KAAM,EAD1B;AAEpB+B,QAAAA,GAAG,EAAEb,YAFe;AAGpBc,QAAAA,IAAI,EAAE;AAHc,OAAxB;AAKA,YAAMC,aAAa,GAAGC,IAAI,CAACC,SAAL,CAAeN,eAAf,CAAtB;AACAhC,MAAAA,GAAG,CAAC+B,MAAJ,CAAW,GAAX,EAAgBQ,IAAhB,CAAqBH,aAArB;AACH;AACJ;AAEJ,CArDD;eAwDezC,Q","sourcesContent":["// generate.js\n\n// app\nimport express from 'express'\nconst generate = express.Router()\n\n// disk i/o\nimport fs from 'fs'\n\n// models\nimport MIDIFile from '../models/MIDIFile.js'\n\n// midi manipulation\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport readMIDI from '../lib/read-midi.js'\nimport writeMIDI from '../lib/write-midi.js'\nimport transformMIDI from '../lib/transform-midi.js'\nimport generateMIDI from '../lib/generate-midi.js'\nimport assembleMIDI from '../lib/assemble.js'\nimport generateMap from '../lib/generate-map.js'\n\ngenerate.post('/', async (req, res) => {\n    // pull the midi from the database\n    const category = req.body.category;\n    const order = parseInt(req.body.order.split(' ')[1], 10);\n    console.log(order);\n    const query = {\n        category: category\n    }\n\n    const categoryMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    const midiObjects = categoryMidiDBObjects.map(dbEntry => {\n        const convertedMidi = readMIDI(dbEntry.data);\n        const deconstructedMidi = transformMIDI(convertedMidi);\n        return deconstructedMidi;\n    });\n    let failed = false;\n    let generatedHex = '';\n    try {\n        // console.log(midiObjects);\n        const markovData = generateMap(midiObjects, order, category);\n        const generatedSong = generateMIDI(markovData, order, category);\n        const generatedMidi = assembleMIDI(generatedSong);\n\n        const generatedBinary = Buffer.from(generatedMidi.getContent());\n        generatedHex = generatedBinary.toString('hex');\n\n        // write it to a file\n        // let path = 'public/temp/test.midi';\n        // let writeStream = fs.createWriteStream(path);\n        // writeStream.write(generatedHex, 'hex');\n        // writeStream.on('finish', () => {\n        //     console.log('Wrote data to file.');\n        // })\n        // writeStream.close();\n\n    } catch (error) {\n        console.log(error);\n        failed = true;\n    } finally {\n        if (failed) {\n            res.status(500);\n        } else {\n            // send the data\n            const generatedObject = {\n                title: `${category} - Generated Order ${order}`,\n                hex: generatedHex,\n                path: '/temp/test.midi'\n            }\n            const generatedJSON = JSON.stringify(generatedObject);\n            res.status(200).send(generatedJSON);\n        }\n    }\n\n});\n\n\nexport default generate;\n"],"file":"generate.js"}