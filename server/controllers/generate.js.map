{"version":3,"sources":["../../source/controllers/generate.js"],"names":["generate","express","Router","post","req","res","category","body","query","categoryMidis","MIDIFile","find","catch","err","console","log","randomMidi","Math","floor","random","length","sacrificedMidi","data","transformMIDIdata","frankenSong","frankenSongBinary","Buffer","from","getContent","generatedHex","toString","path","writeStream","fs","createWriteStream","write","on","close","generatedObject","title","hex","generatedJSON","JSON","stringify","status","send","get","testCategory","testMidiDBObjects","markovSources","map","midi","midiJSON","generatedMidi","generatedMidiBinary","render","name","counter","forEach","filename"],"mappings":"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","sourcesContent":["// generate.js\n\n// app\nimport express from 'express'\nconst generate = express.Router()\n\n// disk i/o\nimport fs from 'fs'\n\n// models\nimport MIDIFile from '../models/MIDIFile.js'\n\n// midi manipulation\nimport midiFile from 'midifile'\nimport midiEvents from 'midievents'\nimport readMIDI from '../lib/read-midi.js'\nimport writeMIDI from '../lib/write-midi.js'\nimport transformMIDI from '../lib/transform-midi.js'\nimport generateMIDI from '../lib/generate-midi.js'\nimport assembleMIDI from '../lib/assemble.js'\n\ngenerate.post('/', async (req, res) => {\n    // pull the midi from the database\n    const category = req.body.category;\n    const query = {\n        category: category\n    }\n    // get all midis from a category\n    const categoryMidis = await MIDIFile.find(query).catch(err => { console.log(err) });\n\n    // fake it until you make it...\n    const randomMidi = categoryMidis[Math.floor(Math.random() * categoryMidis.length)]\n    const sacrificedMidi = readMIDI(randomMidi.data);\n    const transformMIDIdata = transformMIDI(sacrificedMidi);\n    const frankenSong = assembleMIDI(transformMIDIdata);\n    const frankenSongBinary = Buffer.from(frankenSong.getContent());\n\n    const generatedHex = frankenSongBinary.toString('hex');\n\n    // write it to a file\n    let path = 'public/temp/test.midi';\n    let writeStream = fs.createWriteStream(path);\n    writeStream.write(generatedHex, 'hex');\n    writeStream.on('finish', () => {\n        console.log('Wrote data to file.');\n    })\n    writeStream.close();\n\n    // send the data\n    const generatedObject = {\n        title: randomMidi.title,\n        hex: generatedHex,\n        path: '/temp/test.midi'\n    }\n    const generatedJSON = JSON.stringify(generatedObject);\n    res.status(200).send(generatedJSON);\n});\n\n// test Markov generation\ngenerate.get('/test', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let markovSources = testMidiDBObjects.map(midi => {\n        let midiJSON = readMIDI(midi.data);\n        return midiJSON;\n    })\n\n    let generatedMidi = generateMIDI(markovSources);\n    let generatedMidiBinary = Buffer.from(generatedMidi.getContent());\n    writeMIDI(generatedMidiBinary, 'test_generate')\n\n    res.render('test');\n\n})\n\n// testing:\n// --> read midi from database\n// --> write midi to file\ngenerate.get('/write-test', async (req, res) => {\n    // pull test midi from the data base\n    const testCategory = 'test';\n    const query = {\n        category: testCategory\n    };\n    const testMidiDBObjects = await MIDIFile.find(query).catch(err => { console.log(err) });\n    let name = '_pianized_';\n    let counter = 1;\n    testMidiDBObjects.forEach(midi => {\n        let filename = `${counter}${name}${midi.title}`;\n        writeMIDI(midi.data, filename);\n        counter += 1;\n    })\n    // let testMidi = readMIDI(testMidiDBObjects[0].data);\n    // let transformedMIDI = transformMIDI(testMidi);\n    // writeMIDI(testMIDI);\n\n    res.render('test');\n\n})\n\nexport default generate;\n"],"file":"generate.js"}